openapi: 3.0.3
info:
  description: |
    "Try it out"機能は、API仕様を製品と同一ネットワーク上のローカルPCにダウンロードしブラウザで開くことで利用できます。
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: PoE対応 WebAPI K型熱電対アンプ API仕様
  version: 1.2.x
servers:
- description: mDNS利用時
  url: http://{serialNumber}.local
  variables:
    serialNumber:
      default: abcdefghik
      description: "機器固有のシリアルナンバー (10桁の半角英小文字)  \n製品の裏面に貼付されたシールに記載されています。\n"
- description: 直接IP指定時
  url: http://{ipAddress}
  variables:
    ipAddress:
      default: 192.168.1.2
      description: IPアドレス
security:
- basicAuth: []
tags:
- description: 温度
  name: temperature
- description: 校正
  name: calibration
- description: アラート
  name: alert
- description: ネットワーク設定
  name: network
- description: 機器情報
  name: info
- description: 初期化
  name: init
paths:
  /alerts:
    delete:
      description: "登録済みアラート設定を全て削除する。  \n/alerts.html にブラウザからアクセスし操作することも可能\n"
      operationId: alerts_delete
      responses:
        "204":
          description: "アラートの削除に成功  \n登録済みアラート設定が1つも存在しない場合もこのレスポンスを返す\n"
      summary: 登録済みアラート設定を全て削除
      tags:
      - alert
      x-openapi-router-controller: openapi_server.controllers.alert_controller
    get:
      description: |
        登録済みのアラートの一覧を取得する。
      operationId: get_alerts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
          description: "取得成功  \nアラート設定が1つも登録されていなくてもこのレスポンスを返す\n"
      summary: 登録済みアラート設定一覧を取得
      tags:
      - alert
      x-openapi-router-controller: openapi_server.controllers.alert_controller
    post:
      callbacks:
        onEvent:
          http://{$request.body#/dstIp}:{$request.body#/dstPort}{$request.body#/path}:
            post:
              description: "**通知データ**  \n- Webhookモード  \n  以下のRequest bodyの仕様に従ってデ\
                ータをPOSTで通知する。  \n- FTPモード  \n  FTPサーバ内の'path'で指定したディレクトリに対し、通知回数'notifyCnt'の\
                0埋め8桁の数値をファイル名とするcsvファイル（例：00000001.csv）を保存する。  \n  '00000000.csv'に\
                は以下のRequest bodyの入れ子構造を無視した変数名が保存され、'00000001.csv'以降のファイルには各変数の値が保\
                存される。  \n  同名のファイル名が既に存在する場合は上書きする。\n"
              operationId: onEvent_httpPost
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/alertCallback'
              summary: Webhook通知/FTP保存
              x-callback-request: true
      description: "指定した条件を満たしたときにWebhookによる通知やFTPサーバにCSV形式で保存するアラート機能の設定を1つ登録する。\
        \  \n製品の電源を切ってもアラート設定は保持される。アラート設定の削除か製品の初期化を行うことで設定が消去される。  \nアラート設定は最大5個\
        まで設定可能  \n/alerts.html にブラウザからアクセスし操作することも可能  \n※通知データの仕様は以下の\"Callbacks\"\
        タブに記載\n"
      operationId: add_alert_setting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/alert'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alert'
          description: アラート設定の登録成功
          headers:
            Location:
              description: 登録したアラート設定のURL
              schema:
                type: string
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: 登録数の上限に達しているため登録に失敗
      summary: アラート設定を1つ登録
      tags:
      - alert
      x-openapi-router-controller: openapi_server.controllers.alert_controller
  /alerts/{alertId}:
    delete:
      description: |
        指定したidのアラート設定を削除する。
      operationId: alerts_alert_id_delete
      parameters:
      - description: 取得したいアラート設定のID
        in: path
        name: alertId
        required: true
        schema:
          example: 0
          format: int32
          type: integer
      responses:
        "204":
          description: |
            指定したidのアラート設定の削除に成功
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: |
            指定したidのアラート設定が存在しない
      summary: 指定したidのアラート設定を削除
      tags:
      - alert
      x-openapi-router-controller: openapi_server.controllers.alert_controller
    get:
      operationId: get_alert_by_id
      parameters:
      - description: 取得したいアラート設定のID
        in: path
        name: alertId
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/alert'
          description: 取得成功
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
          description: 登録済みアラート設定が存在しない
      summary: 指定したidのアラート設定を取得
      tags:
      - alert
      x-openapi-router-controller: openapi_server.controllers.alert_controller
  /calibration:
    get:
      description: "熱電対の校正パラメータを取得する。  \n/calibration.html にブラウザからアクセスし取得することも可能\n"
      operationId: calibration_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/thermocoupleCalib'
          description: 校正パラメータを応答
      summary: 校正パラメータの取得
      tags:
      - calibration
      x-openapi-router-controller: openapi_server.controllers.calibration_controller
    put:
      description: "熱電対の校正パラメータを変更する。  \n/calibration.html にブラウザからアクセスし操作することも可能\n"
      operationId: calibration_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/thermocoupleCalib'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/thermocoupleCalib'
          description: 校正パラメータを応答
      summary: 熱電対の校正を実行
      tags:
      - calibration
      x-openapi-router-controller: openapi_server.controllers.calibration_controller
  /config/network:
    get:
      description: "ネットワーク設定情報を取得する。  \n初期設定は認証機能：無効、DHCP：有効です。\n"
      operationId: config_network_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/networkConfig'
          description: |
            ネットワーク設定の取得に成功
      summary: ネットワーク設定（認証機能・DHCP・手動IP・PoE）の取得
      tags:
      - network
      x-openapi-router-controller: openapi_server.controllers.network_controller
    patch:
      description: "指定したフィールドの値を変更する。\n指定されなかったフィールドの値は変更されない。  \n変更に成功した場合、応答後にシス\
        テムは自動的に再起動する。  \n/config/network.html にブラウザからアクセスし操作することも可能\n"
      operationId: config_network_patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/networkConfig'
        description: 省略したパラメータは変更されない
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/networkConfig'
          description: "ネットワーク設定の変更に成功  \n※省略したパラメータは表示されない\n"
      summary: ネットワーク設定（認証機能・DHCP・手動IP）の変更
      tags:
      - network
      x-openapi-router-controller: openapi_server.controllers.network_controller
  /info:
    get:
      description: "機器情報を取得する。  \n/info.html にブラウザからアクセスし取得することも可能\n"
      operationId: info_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info'
          description: 機器情報を応答
      summary: 機器情報の取得
      tags:
      - info
      x-openapi-router-controller: openapi_server.controllers.info_controller
    patch:
      description: "指定したフィールドの値を変更する。  \n指定されなかったフィールドの値は変更されない。  \n/info.html にブラ\
        ウザからアクセスし操作することも可能\n"
      operationId: info_patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/info_configurable'
        description: 省略したパラメータは変更されない
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/info_configurable'
          description: "指定した機器情報の変更に成功  \n※省略したパラメータは表示されない\n"
      summary: 設定変更が可能な機器情報の変更
      tags:
      - info
      x-openapi-router-controller: openapi_server.controllers.info_controller
  /init:
    put:
      description: "設定したパラメータをすべて削除し製品を初期状態に戻す。その後、自動的に再起動する。  \nその後、自動的に再起動する  \n\
        /init.html にブラウザからアクセスし操作することも可能\n"
      operationId: init_put
      responses:
        "200":
          description: "初期化に成功  \nこのレスポンスの後、自動的に再起動する\n"
      summary: 製品を初期状態に戻す
      tags:
      - init
      x-openapi-router-controller: openapi_server.controllers.init_controller
  /temperature:
    get:
      description: "熱電対の温接点温度を取得する。  \n/temperature.html にブラウザからアクセスすることで周期的に温度を取得\
        することも可能  \n"
      operationId: temperature_get
      parameters:
      - description: "単位(ケルビン、摂氏、華氏)  \n省略時：Celsius\n"
        in: query
        name: unit
        required: false
        schema:
          enum:
          - Kelvin
          - Celsius
          - Fahrenheit
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/temperature'
          description: 温度情報を応答
      summary: 熱電対の温度の取得
      tags:
      - temperature
      x-openapi-router-controller: openapi_server.controllers.temperature_controller
components:
  schemas:
    temperature:
      additionalProperties: false
      example:
        unit: Celsius
        temperature: 12.3456
      properties:
        temperature:
          description: temperature
          example: 12.3456
          format: float
          title: temperature
          type: number
        unit:
          default: Celsius
          description: 単位
          enum:
          - Kelvin
          - Celsius
          - Fahrenheit
          example: Celsius
          title: unit
          type: string
      title: temperature
      type: object
    calibration:
      example:
        unit: Celsius
        offset: -0.5
      properties:
        unit:
          default: Celsius
          description: 単位
          enum:
          - Kelvin
          - Celsius
          - Fahrenheit
          example: Celsius
          title: unit
          type: string
        offset:
          default: 0
          description: "温度オフセット値  \nデフォルト値：0\n"
          example: -0.5
          format: float
          title: offset
          type: number
      title: thermocoupleCalib
      type: object
    alert:
      additionalProperties: false
      description: アラート設定
      example:
        mode: webhook
        succeedMeasure: true
        path: /notify/tc-kep100
        condition:
          limit: 100.0
          direction: rise
          hysteresis: 10.0
        dstPort: 80
        ftp:
          password: password
          activeMode: false
          userName: user
          addSubDir: false
        connectStatus: Success
        periodSec: 10
        timing: bothTriggerReset
        alertId: 0
        dstIp:
        - 192
        - 168
        - 1
        - 2
        target:
          item: temperature
          setting:
            unit: Celsius
      properties:
        alertId:
          description: |
            アラートID
          format: int32
          minimum: 0
          readOnly: true
          title: alertId
          type: integer
        mode:
          description: "通知モード  \n省略時：webhook  \n'webhook'：Webhookモード。アラート情報をHTTPメッ\
            セージで通知する。  \n'ftp'：FTPモード。FTPサーバに対しアラート情報をCSVファイルで保存する。  \n"
          enum:
          - webhook
          - ftp
          example: webhook
          title: mode
          type: string
        dstIp:
          description: "送信先IPアドレス（Webhookモード：通知先IPアドレス、FTPモード：FTPサーバのIPアドレス）  \n省略\
            時：登録時のホストIP  \nUSBからメッセージを受信した場合：通知先IPアドレス設定時はそのIPに対してアラートを送信する。省略時はUSBに\
            対しアラートを送信する。\n"
          example:
          - 192
          - 168
          - 1
          - 2
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: dstIp
          type: array
        dstPort:
          default: 80
          description: "送信先ポート番号（Webhookモード：通知先ポート、FTPモード：FTPサーバの制御ポート）  \n省略時：80（\
            Webhookモード）、21（FTPモード）\n"
          example: 80
          format: int32
          minimum: 0
          title: dstPort
          type: integer
        ftp:
          $ref: '#/components/schemas/alert_ftp'
        path:
          default: /notify
          description: "送信先パス（Webhookモード：通知先エンドポイント、FTPモード：保存先パス）  \n省略時：'/notify'（\
            Webhookモード）、'/'（FTPモード）  \n<br>※FTPモードで指定したパスが存在しない場合は新たに生成されます。  \n※\
            FTPモード時は最後の'/'は無視されます。\n"
          example: /notify/tc-kep100
          maxLength: 32
          title: path
          type: string
        timing:
          default: bothTriggerReset
          description: "通知/保存タイミングの設定  \n省略時：'bothTriggerReset'  \n'bothTriggerReset'：\
            アラート発報時およびアラート復帰時（＝アラート状態変化時）に通知  \n'onlyTrigger'：アラート発報時のみ通知  \n'eachPeriod'：\
            監視周期毎にアラート状態を継続して通知  \n"
          enum:
          - bothTriggerReset
          - onlyTrigger
          - eachPeriod
          example: bothTriggerReset
          title: timing
          type: string
        periodSec:
          default: 10
          description: "監視周期 [sec]  \n省略時：10\n"
          example: 10
          exclusiveMinimum: false
          minimum: 1
          title: periodSec
          type: integer
        target:
          $ref: '#/components/schemas/alert_target'
        condition:
          $ref: '#/components/schemas/alert_condition'
        connectStatus:
          description: "接続状態  \n直近のアラート通知時における通知先との接続状態  \nNever confirmed：アラート登録後\
            、まだ1度も通知していない or 通知先デバイスがUSB  \nSuccess：接続成功  \nFailure：接続失敗。アラート設定や通知\
            先のファイアウォールなどを確認してください。\n"
          enum:
          - Never confirmed
          - Success
          - Failure
          example: Success
          readOnly: true
          title: connectStatus
          type: string
        succeedMeasure:
          description: "計測成功/失敗  \n直近のアラート監視時における計測の成否  \ntrue：計測成功  \nfalse：計測失敗も\
            しくはアラート登録後一度も監視を行っていない  \n"
          example: true
          readOnly: true
          title: succeedMeasure
          type: boolean
      required:
      - condition
      - target
      title: alert
      type: object
    alerts:
      items:
        $ref: '#/components/schemas/alert'
      type: array
    alerts_withoutFTP:
      additionalProperties: false
      description: アラート設定
      properties:
        alertId:
          description: |
            アラートID
          format: int32
          minimum: 0
          readOnly: true
          title: alertId
          type: integer
        mode:
          description: "通知モード  \n省略時：webhook  \n'webhook'：Webhookモード。アラート情報をHTTPメッ\
            セージで通知する。  \n'ftp'：FTPモード。FTPサーバに対しアラート情報をCSVファイルで保存する。  \n"
          enum:
          - webhook
          - ftp
          example: webhook
          title: mode
          type: string
        dstIp:
          description: "送信先IPアドレス（Webhookモード：通知先IPアドレス、FTPモード：FTPサーバのIPアドレス）  \n省略\
            時：登録時のホストIP  \nUSBからメッセージを受信した場合：通知先IPアドレス設定時はそのIPに対してアラートを送信する。省略時はUSBに\
            対しアラートを送信する。\n"
          example:
          - 192
          - 168
          - 1
          - 2
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: dstIp
          type: array
        dstPort:
          default: 80
          description: "送信先ポート番号（Webhookモード：通知先ポート、FTPモード：FTPサーバの制御ポート）  \n省略時：80（\
            Webhookモード）、21（FTPモード）\n"
          example: 80
          format: int32
          minimum: 0
          title: dstPort
          type: integer
        path:
          default: /notify
          description: "送信先パス（Webhookモード：通知先エンドポイント、FTPモード：保存先パス）  \n省略時：'/notify'（\
            Webhookモード）、'/'（FTPモード）\n"
          example: /notify/tc-kep100
          maxLength: 32
          title: path
          type: string
        timing:
          default: bothTriggerReset
          description: "通知/保存タイミングの設定  \n省略時：'bothTriggerReset'  \n'bothTriggerReset'：\
            アラート発報時およびアラート復帰時（＝アラート状態変化時）に通知  \n'onlyTrigger'：アラート発報時のみ通知  \n'eachPeriod'：\
            監視周期毎にアラート状態を継続して通知  \n"
          enum:
          - bothTriggerReset
          - onlyTrigger
          - eachPeriod
          example: bothTriggerReset
          title: timing
          type: string
        periodSec:
          default: 10
          description: "監視周期 [sec]  \n省略時：10\n"
          example: 10
          exclusiveMinimum: false
          minimum: 1
          title: periodSec
          type: integer
        target:
          $ref: '#/components/schemas/alert_target'
        condition:
          $ref: '#/components/schemas/alert_condition'
      required:
      - condition
      - target
      title: alert_withoutFTP
      type: object
    alertCallback:
      additionalProperties: false
      description: アラート結果
      properties:
        productName:
          description: 製品名
          example: TC-KEP100
          type: string
        serialNumber:
          description: 製品シリアル番号 (10桁の半角英小文字)
          example: abcdefghij
          type: string
        alertId:
          maximum: 4
          minimum: 0
          type: integer
        notifyCnt:
          description: |
            通知回数（電源投入時に0にリセットされる）
          format: int32
          minimum: 0
          type: integer
        isTriggered:
          description: "アラート状態  \ntrue：アラート発生  \nfalse：アラート非発生\n"
          example: true
          type: boolean
        isTriggeredPrev:
          description: "1監視周期前のアラート状態  \ntrue：アラート発生  \nfalse：アラート非発生\n"
          example: true
          type: boolean
        measuredValue:
          description: 測定値
          example: 65.4321
          format: float
          type: number
        alerts:
          $ref: '#/components/schemas/alert_withoutFTP'
      type: object
    info:
      additionalProperties: false
      example:
        uptimeSec: 100
        macAddress: 01:23:45:67:89:AB
        serialNumber: abcdefghik
        customName: sensor_1
        firmwareVersion: 1.0.0
        productName: MC-UEP100
        blinkLed: false
      properties:
        productName:
          description: 製品名
          example: MC-UEP100
          title: productName
          type: string
        serialNumber:
          description: 製品シリアル番号 (10桁の半角英小文字)
          example: abcdefghik
          pattern: ^[a-z]{10}$
          title: serialNumber
          type: string
        macAddress:
          description: MACアドレス (EUI-48)
          example: 01:23:45:67:89:AB
          pattern: ^([0-9A-F]{2}:){5}([0-9A-F]{2})$
          title: macAddress
          type: string
        firmwareVersion:
          description: ファームウェアのバージョン
          example: 1.0.0
          pattern: ^(\d\.){2}\d$
          title: firmwareVersion
          type: string
        uptimeSec:
          description: システム稼働時間 (単位：sec)
          example: 100
          format: int32
          title: uptimeSec
          type: integer
        customName:
          default: '"customName" is not set'
          description: "設定可能な名称  \nユーザが識別を容易にするために利用する。\n"
          example: sensor_1
          maxLength: 32
          title: customName
          type: string
        blinkLed:
          default: false
          description: "Status LED点滅の有無  \n`false`: デフォルト設定。Status LEDはネットワーク状態に対応\
            した動作を行う  \n`true`: Status LEDを点滅させる（点灯時間と消灯時間は同一）  \n本設定は複数のPoE対応WebAPIセ\
            ンサが設置され製品裏面に記載されたシリアルナンバーを確認できない場合に、どの機器が操作対象であるのかを目視で確認する際に利用する。  \n※\
            本設定は電源を再起動するとリセットされる。\n"
          example: false
          title: blinkLed
          type: boolean
      title: info
      type: object
    networkConfig:
      example:
        poeState: true
        auth:
          password: password
          method: Basic
          enable: false
          userName: user
        staticDnsServer:
        - 192
        - 168
        - 1
        - 1
        staticSubnetMask:
        - 255
        - 255
        - 255
        - 0
        enableMdns: true
        staticDefaultGateway:
        - 192
        - 168
        - 1
        - 1
        dhcp:
          dhcpDnsServer:
          - 192
          - 168
          - 1
          - 1
          enable: true
          assigned: false
          dhcpSubnetMask:
          - 255
          - 255
          - 255
          - 0
          dhcpIpAddress:
          - 192
          - 168
          - 1
          - 10
          dhcpDefaultGateway:
          - 192
          - 168
          - 1
          - 1
        staticIpAddress:
        - 192
        - 168
        - 1
        - 100
      properties:
        auth:
          $ref: '#/components/schemas/networkConfig_auth'
        dhcp:
          $ref: '#/components/schemas/networkConfig_dhcp'
        enableMdns:
          default: true
          description: "mDNS機能の有効/無効  \n有効時(true)は \"http://シリアルナンバー.local\" によりアク\
            セス可能\n"
          example: true
          title: enableMdns
          type: boolean
        staticIpAddress:
          default:
          - 192
          - 168
          - 1
          - 100
          description: 静的IPアドレス (IPv4)
          example:
          - 192
          - 168
          - 1
          - 100
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: staticIpAddress
          type: array
        staticSubnetMask:
          default:
          - 255
          - 255
          - 255
          - 0
          description: 静的サブネットマスク (IPv4)
          example:
          - 255
          - 255
          - 255
          - 0
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: staticSubnetMask
          type: array
        staticDefaultGateway:
          default:
          - 192
          - 168
          - 1
          - 1
          description: 静的デフォルトゲートウェイ (IPv4)
          example:
          - 192
          - 168
          - 1
          - 1
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: staticDefaultGateway
          type: array
        staticDnsServer:
          default:
          - 192
          - 168
          - 1
          - 1
          description: 静的DNSサーバIP (IPv4)
          example:
          - 192
          - 168
          - 1
          - 1
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: staticDnsServer
          type: array
        poeState:
          description: |
            PoE電源状態
          example: true
          readOnly: true
          title: poeState
          type: boolean
      title: networkConfig
      type: object
    error:
      properties:
        error:
          $ref: '#/components/schemas/error_error'
      required:
      - error
      title: error
      type: object
    thermocoupleCalib:
      example:
        unit: Celsius
        offset: -0.5
      properties:
        unit:
          default: Celsius
          description: 単位
          enum:
          - Kelvin
          - Celsius
          - Fahrenheit
          example: Celsius
          title: unit
          type: string
        offset:
          default: 0
          description: "温度オフセット値  \nデフォルト値：0\n"
          example: -0.5
          format: float
          title: offset
          type: number
      title: thermocoupleCalib
      type: object
    info_configurable:
      additionalProperties: false
      example:
        customName: sensor_1
        blinkLed: false
      properties:
        customName:
          default: '"customName" is not set'
          description: "設定可能な名称  \nユーザが識別を容易にするために利用する。\n"
          example: sensor_1
          maxLength: 32
          title: customName
          type: string
        blinkLed:
          default: false
          description: "Status LED点滅の有無  \n`false`: デフォルト設定。Status LEDはネットワーク状態に対応\
            した動作を行う  \n`true`: Status LEDを点滅させる（点灯時間と消灯時間は同一）  \n本設定は複数のPoE対応WebAPIセ\
            ンサが設置され製品裏面に記載されたシリアルナンバーを確認できない場合に、どの機器が操作対象であるのかを目視で確認する際に利用する。  \n※\
            本設定は電源を再起動するとリセットされる。\n"
          example: false
          title: blinkLed
          type: boolean
      title: info_configurable
      type: object
    alert_withoutFTP:
      additionalProperties: false
      description: アラート設定
      properties:
        alertId:
          description: |
            アラートID
          format: int32
          minimum: 0
          readOnly: true
          title: alertId
          type: integer
        mode:
          description: "通知モード  \n省略時：webhook  \n'webhook'：Webhookモード。アラート情報をHTTPメッ\
            セージで通知する。  \n'ftp'：FTPモード。FTPサーバに対しアラート情報をCSVファイルで保存する。  \n"
          enum:
          - webhook
          - ftp
          example: webhook
          title: mode
          type: string
        dstIp:
          description: "送信先IPアドレス（Webhookモード：通知先IPアドレス、FTPモード：FTPサーバのIPアドレス）  \n省略\
            時：登録時のホストIP  \nUSBからメッセージを受信した場合：通知先IPアドレス設定時はそのIPに対してアラートを送信する。省略時はUSBに\
            対しアラートを送信する。\n"
          example:
          - 192
          - 168
          - 1
          - 2
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          title: dstIp
          type: array
        dstPort:
          default: 80
          description: "送信先ポート番号（Webhookモード：通知先ポート、FTPモード：FTPサーバの制御ポート）  \n省略時：80（\
            Webhookモード）、21（FTPモード）\n"
          example: 80
          format: int32
          minimum: 0
          title: dstPort
          type: integer
        path:
          default: /notify
          description: "送信先パス（Webhookモード：通知先エンドポイント、FTPモード：保存先パス）  \n省略時：'/notify'（\
            Webhookモード）、'/'（FTPモード）\n"
          example: /notify/tc-kep100
          maxLength: 32
          title: path
          type: string
        timing:
          default: bothTriggerReset
          description: "通知/保存タイミングの設定  \n省略時：'bothTriggerReset'  \n'bothTriggerReset'：\
            アラート発報時およびアラート復帰時（＝アラート状態変化時）に通知  \n'onlyTrigger'：アラート発報時のみ通知  \n'eachPeriod'：\
            監視周期毎にアラート状態を継続して通知  \n"
          enum:
          - bothTriggerReset
          - onlyTrigger
          - eachPeriod
          example: bothTriggerReset
          title: timing
          type: string
        periodSec:
          default: 10
          description: "監視周期 [sec]  \n省略時：10\n"
          example: 10
          exclusiveMinimum: false
          minimum: 1
          title: periodSec
          type: integer
        target:
          $ref: '#/components/schemas/alert_target'
        condition:
          $ref: '#/components/schemas/alert_condition'
      required:
      - condition
      - target
      title: alert_withoutFTP
      type: object
    inline_response_200:
      example:
        alerts:
        - mode: webhook
          succeedMeasure: true
          path: /notify/tc-kep100
          condition:
            limit: 100.0
            direction: rise
            hysteresis: 10.0
          dstPort: 80
          ftp:
            password: password
            activeMode: false
            userName: user
            addSubDir: false
          connectStatus: Success
          periodSec: 10
          timing: bothTriggerReset
          alertId: 0
          dstIp:
          - 192
          - 168
          - 1
          - 2
          target:
            item: temperature
            setting:
              unit: Celsius
        - mode: webhook
          succeedMeasure: true
          path: /notify/tc-kep100
          condition:
            limit: 100.0
            direction: rise
            hysteresis: 10.0
          dstPort: 80
          ftp:
            password: password
            activeMode: false
            userName: user
            addSubDir: false
          connectStatus: Success
          periodSec: 10
          timing: bothTriggerReset
          alertId: 0
          dstIp:
          - 192
          - 168
          - 1
          - 2
          target:
            item: temperature
            setting:
              unit: Celsius
      properties:
        alerts:
          items:
            $ref: '#/components/schemas/alert'
          title: alerts
          type: array
      title: inline_response_200
      type: object
    alert_ftp:
      description: |
        FTP設定。FTPモード時のみ要設定
      example:
        password: password
        activeMode: false
        userName: user
        addSubDir: false
      properties:
        activeMode:
          default: false
          description: "FTPアクティブモード/パッシブモードの選択  \ntrue：アクティブモード  \nfalse：パッシブモード \
            \ \n省略時：false（パッシブモード）\n"
          example: false
          title: activeMode
          type: boolean
        addSubDir:
          default: false
          description: "保存先パスにサブフォルダを作成するかどうかの選択  \ntrue：サブフォルダを作成する  \nfalse：サブフォ\
            ルダを作成しない  \n省略時：false  \nサブフォルダは'path'で指定されたディレクトリの下に作成される。  \n<br>**サ\
            ブフォルダ名の規則**  \n`{serialNumber}_xxx`  \nxxxxは0埋め3桁の数値（初期値は001）。製品が再起動され\
            るごとに新たなフォルダが連番で作成される。  \n例：'addSubDir'がtrue、'path'が`/dir1/dir2`、'serialNumber'が\
            `abcdefghij`のとき、`/dir1/dir2/abcdefghij_001/`以下に通知ファイルが保存される\n"
          example: false
          title: addSubDir
          type: boolean
        userName:
          description: "FTPサーバのユーザ名(最大20文字)  \n※FTPモード時のみ有効\n"
          example: user
          maxLength: 20
          title: userName
          type: string
        password:
          description: "FTPサーバのパスワード(最大20文字)  \n※FTPモード時のみ有効\n"
          example: password
          format: password
          maxLength: 20
          title: password
          type: string
          writeOnly: true
      title: alert_ftp
      type: object
    alert_target_setting:
      description: |
        測定設定
      example:
        unit: Celsius
      properties:
        unit:
          default: Celsius
          description: "単位(ケルビン、摂氏、華氏)  \n省略時：Celsius\n"
          enum:
          - Kelvin
          - Celsius
          - Fahrenheit
          example: Celsius
          title: unit
          type: string
      title: alert_target_setting
      type: object
    alert_target:
      description: |
        測定対象とその条件を設定
      example:
        item: temperature
        setting:
          unit: Celsius
      properties:
        item:
          default: temperature
          description: |
            測定項目を指定
          enum:
          - temperature
          example: temperature
          title: item
          type: string
        setting:
          $ref: '#/components/schemas/alert_target_setting'
      title: alert_target
      type: object
    alert_condition:
      description: "アラート発生条件の条件設定  \n\n- アラート方向：上昇設定時  \n  - アラート発生条件  \n    `測定結果\
        \ >= limit`\n  - アラート復帰条件  \n    `測定結果 < limit - hysteresis`\n\n- アラート方向：下\
        降設定時  \n  - アラート発生条件  \n    `測定結果 <= limit`\n  - アラート復帰条件  \n    `測定結果 > limit\
        \ + hysteresis`\n"
      example:
        limit: 100.0
        direction: rise
        hysteresis: 10.0
      properties:
        direction:
          description: "アラート方向  \nrise：値の上昇を検知  \nfall：値の下降を検知\n"
          enum:
          - rise
          - fall
          example: rise
          title: direction
          type: string
        limit:
          description: |
            アラートリミット値
          example: 100.0
          exclusiveMinimum: false
          format: float
          title: limit
          type: number
        hysteresis:
          default: 0.0
          description: "ヒステリシス値  \n省略時：0\n"
          example: 10.0
          format: float
          minimum: 0.0
          title: hysteresis
          type: number
      title: alert_condition
      type: object
    networkConfig_auth:
      description: "認証機能の設定  \n※1ユーザのみ設定可\n"
      example:
        password: password
        method: Basic
        enable: false
        userName: user
      properties:
        enable:
          default: false
          description: |
            認証機能の有効/無効
          example: false
          title: enable
          type: boolean
        method:
          default: Basic
          description: "認証方式  \n※現バージョンではBasic認証のみサポート\n- \"Basic\"：Basic認証\n"
          enum:
          - Basic
          example: Basic
          title: method
          type: string
        userName:
          description: |
            ユーザ名(最大20文字)
          example: user
          maxLength: 20
          title: userName
          type: string
          writeOnly: true
        password:
          description: |
            パスワード(最大20文字)
          example: password
          format: password
          maxLength: 20
          title: password
          type: string
          writeOnly: true
      title: networkConfig_auth
      type: object
    networkConfig_dhcp:
      description: "DHCPの設定  \n"
      example:
        dhcpDnsServer:
        - 192
        - 168
        - 1
        - 1
        enable: true
        assigned: false
        dhcpSubnetMask:
        - 255
        - 255
        - 255
        - 0
        dhcpIpAddress:
        - 192
        - 168
        - 1
        - 10
        dhcpDefaultGateway:
        - 192
        - 168
        - 1
        - 1
      properties:
        enable:
          default: true
          description: "DHCPクライアント機能の有効/無効  \n有効時(true)はDHCPにより自動的にネットワーク設定情報を取得する\
            。  \n無効時(false)もしくはDHCPでネットワーク設定情報の取得に失敗した場合は staticIpAddress, staticSubnetMask,\
            \ staticDefaultGateway に設定された静的ネットワーク情報を用いる。\n"
          example: true
          title: enable
          type: boolean
        assigned:
          default: false
          description: "DHCP割り当て状態  \ntrue：DHCPサーバからネットワーク設定情報が割り当て済み  \nfalse：DHCPク\
            ライアント機能が無効になっているか、まだネットワーク設定情報が割り当てられていない\n"
          example: false
          readOnly: true
          title: assigned
          type: boolean
        dhcpIpAddress:
          description: |
            動的IPアドレス (IPv4)
            dhcpAssignedがtrueのときのみ値が返される
          example:
          - 192
          - 168
          - 1
          - 10
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          readOnly: true
          title: dhcpIpAddress
          type: array
        dhcpSubnetMask:
          description: |
            動的サブネットマスク (IPv4)
            dhcpAssignedがtrueのときのみ値が返される
          example:
          - 255
          - 255
          - 255
          - 0
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          readOnly: true
          title: dhcpSubnetMask
          type: array
        dhcpDefaultGateway:
          description: |
            動的デフォルトゲートウェイ (IPv4)
            dhcpAssignedがtrueのときのみ値が返される
          example:
          - 192
          - 168
          - 1
          - 1
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          readOnly: true
          title: dhcpDefaultGateway
          type: array
        dhcpDnsServer:
          description: "動的DNSサーバIP (IPv4)  \ndhcpAssignedがtrueのときのみ値が返される\n"
          example:
          - 192
          - 168
          - 1
          - 1
          items:
            maximum: 255
            minimum: 0
            type: integer
          maxItems: 4
          minItems: 4
          readOnly: true
          title: dhcpDnsServer
          type: array
      title: networkConfig_dhcp
      type: object
    error_error:
      properties:
        code:
          description: |
            HTTPステータスコード
          format: int32
          title: code
          type: integer
        message:
          description: |
            エラー内容
          title: message
          type: string
      required:
      - code
      - message
      title: error_error
      type: object
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller_.info_from_basicAuth
