# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.alert_without_ftp import AlertWithoutFTP
from openapi_server import util

from openapi_server.models.alert_without_ftp import AlertWithoutFTP  # noqa: E501

class AlertCallback(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_name=None, serial_number=None, alert_id=None, notify_cnt=None, is_triggered=None, is_triggered_prev=None, measured_value=None, alerts=None):  # noqa: E501
        """AlertCallback - a model defined in OpenAPI

        :param product_name: The product_name of this AlertCallback.  # noqa: E501
        :type product_name: str
        :param serial_number: The serial_number of this AlertCallback.  # noqa: E501
        :type serial_number: str
        :param alert_id: The alert_id of this AlertCallback.  # noqa: E501
        :type alert_id: int
        :param notify_cnt: The notify_cnt of this AlertCallback.  # noqa: E501
        :type notify_cnt: int
        :param is_triggered: The is_triggered of this AlertCallback.  # noqa: E501
        :type is_triggered: bool
        :param is_triggered_prev: The is_triggered_prev of this AlertCallback.  # noqa: E501
        :type is_triggered_prev: bool
        :param measured_value: The measured_value of this AlertCallback.  # noqa: E501
        :type measured_value: float
        :param alerts: The alerts of this AlertCallback.  # noqa: E501
        :type alerts: AlertWithoutFTP
        """
        self.openapi_types = {
            'product_name': str,
            'serial_number': str,
            'alert_id': int,
            'notify_cnt': int,
            'is_triggered': bool,
            'is_triggered_prev': bool,
            'measured_value': float,
            'alerts': AlertWithoutFTP
        }

        self.attribute_map = {
            'product_name': 'productName',
            'serial_number': 'serialNumber',
            'alert_id': 'alertId',
            'notify_cnt': 'notifyCnt',
            'is_triggered': 'isTriggered',
            'is_triggered_prev': 'isTriggeredPrev',
            'measured_value': 'measuredValue',
            'alerts': 'alerts'
        }

        self._product_name = product_name
        self._serial_number = serial_number
        self._alert_id = alert_id
        self._notify_cnt = notify_cnt
        self._is_triggered = is_triggered
        self._is_triggered_prev = is_triggered_prev
        self._measured_value = measured_value
        self._alerts = alerts

    @classmethod
    def from_dict(cls, dikt) -> 'AlertCallback':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alertCallback of this AlertCallback.  # noqa: E501
        :rtype: AlertCallback
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_name(self):
        """Gets the product_name of this AlertCallback.

        製品名  # noqa: E501

        :return: The product_name of this AlertCallback.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this AlertCallback.

        製品名  # noqa: E501

        :param product_name: The product_name of this AlertCallback.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def serial_number(self):
        """Gets the serial_number of this AlertCallback.

        製品シリアル番号 (10桁の半角英小文字)  # noqa: E501

        :return: The serial_number of this AlertCallback.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this AlertCallback.

        製品シリアル番号 (10桁の半角英小文字)  # noqa: E501

        :param serial_number: The serial_number of this AlertCallback.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def alert_id(self):
        """Gets the alert_id of this AlertCallback.


        :return: The alert_id of this AlertCallback.
        :rtype: int
        """
        return self._alert_id

    @alert_id.setter
    def alert_id(self, alert_id):
        """Sets the alert_id of this AlertCallback.


        :param alert_id: The alert_id of this AlertCallback.
        :type alert_id: int
        """
        if alert_id is not None and alert_id > 4:  # noqa: E501
            raise ValueError("Invalid value for `alert_id`, must be a value less than or equal to `4`")  # noqa: E501
        if alert_id is not None and alert_id < 0:  # noqa: E501
            raise ValueError("Invalid value for `alert_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._alert_id = alert_id

    @property
    def notify_cnt(self):
        """Gets the notify_cnt of this AlertCallback.

        通知回数（電源投入時に0にリセットされる）   # noqa: E501

        :return: The notify_cnt of this AlertCallback.
        :rtype: int
        """
        return self._notify_cnt

    @notify_cnt.setter
    def notify_cnt(self, notify_cnt):
        """Sets the notify_cnt of this AlertCallback.

        通知回数（電源投入時に0にリセットされる）   # noqa: E501

        :param notify_cnt: The notify_cnt of this AlertCallback.
        :type notify_cnt: int
        """
        if notify_cnt is not None and notify_cnt < 0:  # noqa: E501
            raise ValueError("Invalid value for `notify_cnt`, must be a value greater than or equal to `0`")  # noqa: E501

        self._notify_cnt = notify_cnt

    @property
    def is_triggered(self):
        """Gets the is_triggered of this AlertCallback.

        アラート状態   true：アラート発生   false：アラート非発生   # noqa: E501

        :return: The is_triggered of this AlertCallback.
        :rtype: bool
        """
        return self._is_triggered

    @is_triggered.setter
    def is_triggered(self, is_triggered):
        """Sets the is_triggered of this AlertCallback.

        アラート状態   true：アラート発生   false：アラート非発生   # noqa: E501

        :param is_triggered: The is_triggered of this AlertCallback.
        :type is_triggered: bool
        """

        self._is_triggered = is_triggered

    @property
    def is_triggered_prev(self):
        """Gets the is_triggered_prev of this AlertCallback.

        1監視周期前のアラート状態   true：アラート発生   false：アラート非発生   # noqa: E501

        :return: The is_triggered_prev of this AlertCallback.
        :rtype: bool
        """
        return self._is_triggered_prev

    @is_triggered_prev.setter
    def is_triggered_prev(self, is_triggered_prev):
        """Sets the is_triggered_prev of this AlertCallback.

        1監視周期前のアラート状態   true：アラート発生   false：アラート非発生   # noqa: E501

        :param is_triggered_prev: The is_triggered_prev of this AlertCallback.
        :type is_triggered_prev: bool
        """

        self._is_triggered_prev = is_triggered_prev

    @property
    def measured_value(self):
        """Gets the measured_value of this AlertCallback.

        測定値  # noqa: E501

        :return: The measured_value of this AlertCallback.
        :rtype: float
        """
        return self._measured_value

    @measured_value.setter
    def measured_value(self, measured_value):
        """Sets the measured_value of this AlertCallback.

        測定値  # noqa: E501

        :param measured_value: The measured_value of this AlertCallback.
        :type measured_value: float
        """

        self._measured_value = measured_value

    @property
    def alerts(self):
        """Gets the alerts of this AlertCallback.


        :return: The alerts of this AlertCallback.
        :rtype: AlertWithoutFTP
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this AlertCallback.


        :param alerts: The alerts of this AlertCallback.
        :type alerts: AlertWithoutFTP
        """

        self._alerts = alerts
