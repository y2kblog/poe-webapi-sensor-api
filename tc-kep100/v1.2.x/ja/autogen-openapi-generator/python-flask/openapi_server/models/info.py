# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Info(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, product_name=None, serial_number=None, mac_address=None, firmware_version=None, uptime_sec=None, custom_name='"customName" is not set', blink_led=False):  # noqa: E501
        """Info - a model defined in OpenAPI

        :param product_name: The product_name of this Info.  # noqa: E501
        :type product_name: str
        :param serial_number: The serial_number of this Info.  # noqa: E501
        :type serial_number: str
        :param mac_address: The mac_address of this Info.  # noqa: E501
        :type mac_address: str
        :param firmware_version: The firmware_version of this Info.  # noqa: E501
        :type firmware_version: str
        :param uptime_sec: The uptime_sec of this Info.  # noqa: E501
        :type uptime_sec: int
        :param custom_name: The custom_name of this Info.  # noqa: E501
        :type custom_name: str
        :param blink_led: The blink_led of this Info.  # noqa: E501
        :type blink_led: bool
        """
        self.openapi_types = {
            'product_name': str,
            'serial_number': str,
            'mac_address': str,
            'firmware_version': str,
            'uptime_sec': int,
            'custom_name': str,
            'blink_led': bool
        }

        self.attribute_map = {
            'product_name': 'productName',
            'serial_number': 'serialNumber',
            'mac_address': 'macAddress',
            'firmware_version': 'firmwareVersion',
            'uptime_sec': 'uptimeSec',
            'custom_name': 'customName',
            'blink_led': 'blinkLed'
        }

        self._product_name = product_name
        self._serial_number = serial_number
        self._mac_address = mac_address
        self._firmware_version = firmware_version
        self._uptime_sec = uptime_sec
        self._custom_name = custom_name
        self._blink_led = blink_led

    @classmethod
    def from_dict(cls, dikt) -> 'Info':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The info of this Info.  # noqa: E501
        :rtype: Info
        """
        return util.deserialize_model(dikt, cls)

    @property
    def product_name(self):
        """Gets the product_name of this Info.

        製品名  # noqa: E501

        :return: The product_name of this Info.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this Info.

        製品名  # noqa: E501

        :param product_name: The product_name of this Info.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def serial_number(self):
        """Gets the serial_number of this Info.

        製品シリアル番号 (10桁の半角英小文字)  # noqa: E501

        :return: The serial_number of this Info.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this Info.

        製品シリアル番号 (10桁の半角英小文字)  # noqa: E501

        :param serial_number: The serial_number of this Info.
        :type serial_number: str
        """
        if serial_number is not None and not re.search(r'^[a-z]{10}$', serial_number):  # noqa: E501
            raise ValueError("Invalid value for `serial_number`, must be a follow pattern or equal to `/^[a-z]{10}$/`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def mac_address(self):
        """Gets the mac_address of this Info.

        MACアドレス (EUI-48)  # noqa: E501

        :return: The mac_address of this Info.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this Info.

        MACアドレス (EUI-48)  # noqa: E501

        :param mac_address: The mac_address of this Info.
        :type mac_address: str
        """
        if mac_address is not None and not re.search(r'^([0-9A-F]{2}:){5}([0-9A-F]{2})$', mac_address):  # noqa: E501
            raise ValueError("Invalid value for `mac_address`, must be a follow pattern or equal to `/^([0-9A-F]{2}:){5}([0-9A-F]{2})$/`")  # noqa: E501

        self._mac_address = mac_address

    @property
    def firmware_version(self):
        """Gets the firmware_version of this Info.

        ファームウェアのバージョン  # noqa: E501

        :return: The firmware_version of this Info.
        :rtype: str
        """
        return self._firmware_version

    @firmware_version.setter
    def firmware_version(self, firmware_version):
        """Sets the firmware_version of this Info.

        ファームウェアのバージョン  # noqa: E501

        :param firmware_version: The firmware_version of this Info.
        :type firmware_version: str
        """
        if firmware_version is not None and not re.search(r'^(\d\.){2}\d$', firmware_version):  # noqa: E501
            raise ValueError("Invalid value for `firmware_version`, must be a follow pattern or equal to `/^(\d\.){2}\d$/`")  # noqa: E501

        self._firmware_version = firmware_version

    @property
    def uptime_sec(self):
        """Gets the uptime_sec of this Info.

        システム稼働時間 (単位：sec)  # noqa: E501

        :return: The uptime_sec of this Info.
        :rtype: int
        """
        return self._uptime_sec

    @uptime_sec.setter
    def uptime_sec(self, uptime_sec):
        """Sets the uptime_sec of this Info.

        システム稼働時間 (単位：sec)  # noqa: E501

        :param uptime_sec: The uptime_sec of this Info.
        :type uptime_sec: int
        """

        self._uptime_sec = uptime_sec

    @property
    def custom_name(self):
        """Gets the custom_name of this Info.

        設定可能な名称   ユーザが識別を容易にするために利用する。   # noqa: E501

        :return: The custom_name of this Info.
        :rtype: str
        """
        return self._custom_name

    @custom_name.setter
    def custom_name(self, custom_name):
        """Sets the custom_name of this Info.

        設定可能な名称   ユーザが識別を容易にするために利用する。   # noqa: E501

        :param custom_name: The custom_name of this Info.
        :type custom_name: str
        """
        if custom_name is not None and len(custom_name) > 32:
            raise ValueError("Invalid value for `custom_name`, length must be less than or equal to `32`")  # noqa: E501

        self._custom_name = custom_name

    @property
    def blink_led(self):
        """Gets the blink_led of this Info.

        Status LED点滅の有無   `false`: デフォルト設定。Status LEDはネットワーク状態に対応した動作を行う   `true`: Status LEDを点滅させる（点灯時間と消灯時間は同一）   本設定は複数のPoE対応WebAPIセンサが設置され製品裏面に記載されたシリアルナンバーを確認できない場合に、どの機器が操作対象であるのかを目視で確認する際に利用する。   ※本設定は電源を再起動するとリセットされる。   # noqa: E501

        :return: The blink_led of this Info.
        :rtype: bool
        """
        return self._blink_led

    @blink_led.setter
    def blink_led(self, blink_led):
        """Sets the blink_led of this Info.

        Status LED点滅の有無   `false`: デフォルト設定。Status LEDはネットワーク状態に対応した動作を行う   `true`: Status LEDを点滅させる（点灯時間と消灯時間は同一）   本設定は複数のPoE対応WebAPIセンサが設置され製品裏面に記載されたシリアルナンバーを確認できない場合に、どの機器が操作対象であるのかを目視で確認する際に利用する。   ※本設定は電源を再起動するとリセットされる。   # noqa: E501

        :param blink_led: The blink_led of this Info.
        :type blink_led: bool
        """

        self._blink_led = blink_led
