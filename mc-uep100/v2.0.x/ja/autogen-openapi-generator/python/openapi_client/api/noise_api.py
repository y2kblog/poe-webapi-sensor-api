"""
    PoE対応 WebAPI 超音波センサ API仕様

    \"Try it out\"機能は、API仕様を製品と同一ネットワーク上のローカルPCにダウンロードしブラウザで開くことで利用できます。   # noqa: E501

    The version of the OpenAPI document: 2.0.x
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.error import Error
from openapi_client.model.sound_level_result import SoundLevelResult


class NoiseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_noise(
            self,
            **kwargs
        ):
            """騒音レベルの取得   # noqa: E501

            下記3項目を測定する。 周波数重み付け特性はA特性を適用する。  - 等価騒音レベル(Leq)   Equivalent continuous A-weighted sound pressure level.   指定した測定時間内の騒音の総エネルギーの時間平均値を音圧レベル表示した値。   環境騒音の評価量として用いられる。    - 単発騒音暴露レベル(SEL)   Single Event Noise exposure level.   単発的に発生する騒音の全エネルギーと等しいエネルギーを持つ継続時間1秒間の定常音の音圧レベルに換算した値。   単発的または間欠的に発生する継続時間の短い騒音を測定する評価量として用いられる。    - ピーク音圧レベル(Lpeak)   指定した測定時間内の騒音の最大値を音圧レベル表示した値。    ※本製品はJIS C 1509や計量法に定められた騒音計には適合しておりません。   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_noise(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                time_sec (float): 測定時間 (単位：sec)    省略時：0.1024 sec . [optional]
                time_weight (str): 時間重み付け特性   省略時：Slow   - \"slow\"：時定数1sec。   - \"fast\"：時定数0.125sec。   - \"impulse\"：時定数0.035sec。 . [optional] if omitted the server will use the default value of "slow"
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SoundLevelResult
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_noise = _Endpoint(
            settings={
                'response_type': (SoundLevelResult,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/noise',
                'operation_id': 'get_noise',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'time_sec',
                    'time_weight',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'time_weight',
                ],
                'validation': [
                    'time_sec',
                ]
            },
            root_map={
                'validations': {
                    ('time_sec',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                    ('time_weight',): {

                        "SLOW": "slow",
                        "FAST": "fast",
                        "IMPULSE": "impulse"
                    },
                },
                'openapi_types': {
                    'time_sec':
                        (float,),
                    'time_weight':
                        (str,),
                },
                'attribute_map': {
                    'time_sec': 'timeSec',
                    'time_weight': 'timeWeight',
                },
                'location_map': {
                    'time_sec': 'query',
                    'time_weight': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_noise
        )
