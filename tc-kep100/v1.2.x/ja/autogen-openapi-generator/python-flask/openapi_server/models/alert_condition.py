# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class AlertCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction=None, limit=None, hysteresis=0.0):  # noqa: E501
        """AlertCondition - a model defined in OpenAPI

        :param direction: The direction of this AlertCondition.  # noqa: E501
        :type direction: str
        :param limit: The limit of this AlertCondition.  # noqa: E501
        :type limit: float
        :param hysteresis: The hysteresis of this AlertCondition.  # noqa: E501
        :type hysteresis: float
        """
        self.openapi_types = {
            'direction': str,
            'limit': float,
            'hysteresis': float
        }

        self.attribute_map = {
            'direction': 'direction',
            'limit': 'limit',
            'hysteresis': 'hysteresis'
        }

        self._direction = direction
        self._limit = limit
        self._hysteresis = hysteresis

    @classmethod
    def from_dict(cls, dikt) -> 'AlertCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alert_condition of this AlertCondition.  # noqa: E501
        :rtype: AlertCondition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self):
        """Gets the direction of this AlertCondition.

        アラート方向   rise：値の上昇を検知   fall：値の下降を検知   # noqa: E501

        :return: The direction of this AlertCondition.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this AlertCondition.

        アラート方向   rise：値の上昇を検知   fall：値の下降を検知   # noqa: E501

        :param direction: The direction of this AlertCondition.
        :type direction: str
        """
        allowed_values = ["rise", "fall"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def limit(self):
        """Gets the limit of this AlertCondition.

        アラートリミット値   # noqa: E501

        :return: The limit of this AlertCondition.
        :rtype: float
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this AlertCondition.

        アラートリミット値   # noqa: E501

        :param limit: The limit of this AlertCondition.
        :type limit: float
        """

        self._limit = limit

    @property
    def hysteresis(self):
        """Gets the hysteresis of this AlertCondition.

        ヒステリシス値   省略時：0   # noqa: E501

        :return: The hysteresis of this AlertCondition.
        :rtype: float
        """
        return self._hysteresis

    @hysteresis.setter
    def hysteresis(self, hysteresis):
        """Sets the hysteresis of this AlertCondition.

        ヒステリシス値   省略時：0   # noqa: E501

        :param hysteresis: The hysteresis of this AlertCondition.
        :type hysteresis: float
        """
        if hysteresis is not None and hysteresis < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `hysteresis`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._hysteresis = hysteresis
