# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class RawSetting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_running=None, dst_ip=None, dst_port=None, frq_hz=160000, data_num=None):  # noqa: E501
        """RawSetting - a model defined in OpenAPI

        :param is_running: The is_running of this RawSetting.  # noqa: E501
        :type is_running: bool
        :param dst_ip: The dst_ip of this RawSetting.  # noqa: E501
        :type dst_ip: List[int]
        :param dst_port: The dst_port of this RawSetting.  # noqa: E501
        :type dst_port: int
        :param frq_hz: The frq_hz of this RawSetting.  # noqa: E501
        :type frq_hz: int
        :param data_num: The data_num of this RawSetting.  # noqa: E501
        :type data_num: int
        """
        self.openapi_types = {
            'is_running': bool,
            'dst_ip': List[int],
            'dst_port': int,
            'frq_hz': int,
            'data_num': int
        }

        self.attribute_map = {
            'is_running': 'isRunning',
            'dst_ip': 'dstIp',
            'dst_port': 'dstPort',
            'frq_hz': 'frqHz',
            'data_num': 'dataNum'
        }

        self._is_running = is_running
        self._dst_ip = dst_ip
        self._dst_port = dst_port
        self._frq_hz = frq_hz
        self._data_num = data_num

    @classmethod
    def from_dict(cls, dikt) -> 'RawSetting':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The raw_setting of this RawSetting.  # noqa: E501
        :rtype: RawSetting
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_running(self):
        """Gets the is_running of this RawSetting.

        生値取得状態   falseのとき、他のパラメータは送信されない   # noqa: E501

        :return: The is_running of this RawSetting.
        :rtype: bool
        """
        return self._is_running

    @is_running.setter
    def is_running(self, is_running):
        """Sets the is_running of this RawSetting.

        生値取得状態   falseのとき、他のパラメータは送信されない   # noqa: E501

        :param is_running: The is_running of this RawSetting.
        :type is_running: bool
        """

        self._is_running = is_running

    @property
    def dst_ip(self):
        """Gets the dst_ip of this RawSetting.

        送信先IPアドレス   省略時：HTTPリクエストの送信元IP   # noqa: E501

        :return: The dst_ip of this RawSetting.
        :rtype: List[int]
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this RawSetting.

        送信先IPアドレス   省略時：HTTPリクエストの送信元IP   # noqa: E501

        :param dst_ip: The dst_ip of this RawSetting.
        :type dst_ip: List[int]
        """
        if dst_ip is not None and len(dst_ip) > 4:
            raise ValueError("Invalid value for `dst_ip`, number of items must be less than or equal to `4`")  # noqa: E501
        if dst_ip is not None and len(dst_ip) < 4:
            raise ValueError("Invalid value for `dst_ip`, number of items must be greater than or equal to `4`")  # noqa: E501

        self._dst_ip = dst_ip

    @property
    def dst_port(self):
        """Gets the dst_port of this RawSetting.

        送信先ポート番号  # noqa: E501

        :return: The dst_port of this RawSetting.
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this RawSetting.

        送信先ポート番号  # noqa: E501

        :param dst_port: The dst_port of this RawSetting.
        :type dst_port: int
        """
        if dst_port is None:
            raise ValueError("Invalid value for `dst_port`, must not be `None`")  # noqa: E501
        if dst_port is not None and dst_port > 65535:  # noqa: E501
            raise ValueError("Invalid value for `dst_port`, must be a value less than or equal to `65535`")  # noqa: E501
        if dst_port is not None and dst_port < 1024:  # noqa: E501
            raise ValueError("Invalid value for `dst_port`, must be a value greater than or equal to `1024`")  # noqa: E501

        self._dst_port = dst_port

    @property
    def frq_hz(self):
        """Gets the frq_hz of this RawSetting.

        サンプリング周波数 (単位：Hz)     # noqa: E501

        :return: The frq_hz of this RawSetting.
        :rtype: int
        """
        return self._frq_hz

    @frq_hz.setter
    def frq_hz(self, frq_hz):
        """Sets the frq_hz of this RawSetting.

        サンプリング周波数 (単位：Hz)     # noqa: E501

        :param frq_hz: The frq_hz of this RawSetting.
        :type frq_hz: int
        """
        allowed_values = [40000, 80000, 120000, 160000]  # noqa: E501
        if frq_hz not in allowed_values:
            raise ValueError(
                "Invalid value for `frq_hz` ({0}), must be one of {1}"
                .format(frq_hz, allowed_values)
            )

        self._frq_hz = frq_hz

    @property
    def data_num(self):
        """Gets the data_num of this RawSetting.

        データ数   省略時：生値取得終了コマンドを受け取るまでデータを送信し続ける   # noqa: E501

        :return: The data_num of this RawSetting.
        :rtype: int
        """
        return self._data_num

    @data_num.setter
    def data_num(self, data_num):
        """Sets the data_num of this RawSetting.

        データ数   省略時：生値取得終了コマンドを受け取るまでデータを送信し続ける   # noqa: E501

        :param data_num: The data_num of this RawSetting.
        :type data_num: int
        """
        if data_num is not None and data_num < 1:  # noqa: E501
            raise ValueError("Invalid value for `data_num`, must be a value greater than or equal to `1`")  # noqa: E501

        self._data_num = data_num
