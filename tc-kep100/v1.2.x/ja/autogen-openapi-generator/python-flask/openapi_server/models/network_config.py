# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.network_config_auth import NetworkConfigAuth
from openapi_server.models.network_config_dhcp import NetworkConfigDhcp
from openapi_server import util

from openapi_server.models.network_config_auth import NetworkConfigAuth  # noqa: E501
from openapi_server.models.network_config_dhcp import NetworkConfigDhcp  # noqa: E501

class NetworkConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth=None, dhcp=None, enable_mdns=True, static_ip_address=[192, 168, 1, 100], static_subnet_mask=[255, 255, 255, 0], static_default_gateway=[192, 168, 1, 1], static_dns_server=[192, 168, 1, 1], poe_state=None):  # noqa: E501
        """NetworkConfig - a model defined in OpenAPI

        :param auth: The auth of this NetworkConfig.  # noqa: E501
        :type auth: NetworkConfigAuth
        :param dhcp: The dhcp of this NetworkConfig.  # noqa: E501
        :type dhcp: NetworkConfigDhcp
        :param enable_mdns: The enable_mdns of this NetworkConfig.  # noqa: E501
        :type enable_mdns: bool
        :param static_ip_address: The static_ip_address of this NetworkConfig.  # noqa: E501
        :type static_ip_address: List[int]
        :param static_subnet_mask: The static_subnet_mask of this NetworkConfig.  # noqa: E501
        :type static_subnet_mask: List[int]
        :param static_default_gateway: The static_default_gateway of this NetworkConfig.  # noqa: E501
        :type static_default_gateway: List[int]
        :param static_dns_server: The static_dns_server of this NetworkConfig.  # noqa: E501
        :type static_dns_server: List[int]
        :param poe_state: The poe_state of this NetworkConfig.  # noqa: E501
        :type poe_state: bool
        """
        self.openapi_types = {
            'auth': NetworkConfigAuth,
            'dhcp': NetworkConfigDhcp,
            'enable_mdns': bool,
            'static_ip_address': List[int],
            'static_subnet_mask': List[int],
            'static_default_gateway': List[int],
            'static_dns_server': List[int],
            'poe_state': bool
        }

        self.attribute_map = {
            'auth': 'auth',
            'dhcp': 'dhcp',
            'enable_mdns': 'enableMdns',
            'static_ip_address': 'staticIpAddress',
            'static_subnet_mask': 'staticSubnetMask',
            'static_default_gateway': 'staticDefaultGateway',
            'static_dns_server': 'staticDnsServer',
            'poe_state': 'poeState'
        }

        self._auth = auth
        self._dhcp = dhcp
        self._enable_mdns = enable_mdns
        self._static_ip_address = static_ip_address
        self._static_subnet_mask = static_subnet_mask
        self._static_default_gateway = static_default_gateway
        self._static_dns_server = static_dns_server
        self._poe_state = poe_state

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The networkConfig of this NetworkConfig.  # noqa: E501
        :rtype: NetworkConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth(self):
        """Gets the auth of this NetworkConfig.


        :return: The auth of this NetworkConfig.
        :rtype: NetworkConfigAuth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this NetworkConfig.


        :param auth: The auth of this NetworkConfig.
        :type auth: NetworkConfigAuth
        """

        self._auth = auth

    @property
    def dhcp(self):
        """Gets the dhcp of this NetworkConfig.


        :return: The dhcp of this NetworkConfig.
        :rtype: NetworkConfigDhcp
        """
        return self._dhcp

    @dhcp.setter
    def dhcp(self, dhcp):
        """Sets the dhcp of this NetworkConfig.


        :param dhcp: The dhcp of this NetworkConfig.
        :type dhcp: NetworkConfigDhcp
        """

        self._dhcp = dhcp

    @property
    def enable_mdns(self):
        """Gets the enable_mdns of this NetworkConfig.

        mDNS機能の有効/無効   有効時(true)は \"http://シリアルナンバー.local\" によりアクセス可能   # noqa: E501

        :return: The enable_mdns of this NetworkConfig.
        :rtype: bool
        """
        return self._enable_mdns

    @enable_mdns.setter
    def enable_mdns(self, enable_mdns):
        """Sets the enable_mdns of this NetworkConfig.

        mDNS機能の有効/無効   有効時(true)は \"http://シリアルナンバー.local\" によりアクセス可能   # noqa: E501

        :param enable_mdns: The enable_mdns of this NetworkConfig.
        :type enable_mdns: bool
        """

        self._enable_mdns = enable_mdns

    @property
    def static_ip_address(self):
        """Gets the static_ip_address of this NetworkConfig.

        静的IPアドレス (IPv4)  # noqa: E501

        :return: The static_ip_address of this NetworkConfig.
        :rtype: List[int]
        """
        return self._static_ip_address

    @static_ip_address.setter
    def static_ip_address(self, static_ip_address):
        """Sets the static_ip_address of this NetworkConfig.

        静的IPアドレス (IPv4)  # noqa: E501

        :param static_ip_address: The static_ip_address of this NetworkConfig.
        :type static_ip_address: List[int]
        """
        if static_ip_address is not None and len(static_ip_address) > 4:
            raise ValueError("Invalid value for `static_ip_address`, number of items must be less than or equal to `4`")  # noqa: E501
        if static_ip_address is not None and len(static_ip_address) < 4:
            raise ValueError("Invalid value for `static_ip_address`, number of items must be greater than or equal to `4`")  # noqa: E501

        self._static_ip_address = static_ip_address

    @property
    def static_subnet_mask(self):
        """Gets the static_subnet_mask of this NetworkConfig.

        静的サブネットマスク (IPv4)  # noqa: E501

        :return: The static_subnet_mask of this NetworkConfig.
        :rtype: List[int]
        """
        return self._static_subnet_mask

    @static_subnet_mask.setter
    def static_subnet_mask(self, static_subnet_mask):
        """Sets the static_subnet_mask of this NetworkConfig.

        静的サブネットマスク (IPv4)  # noqa: E501

        :param static_subnet_mask: The static_subnet_mask of this NetworkConfig.
        :type static_subnet_mask: List[int]
        """
        if static_subnet_mask is not None and len(static_subnet_mask) > 4:
            raise ValueError("Invalid value for `static_subnet_mask`, number of items must be less than or equal to `4`")  # noqa: E501
        if static_subnet_mask is not None and len(static_subnet_mask) < 4:
            raise ValueError("Invalid value for `static_subnet_mask`, number of items must be greater than or equal to `4`")  # noqa: E501

        self._static_subnet_mask = static_subnet_mask

    @property
    def static_default_gateway(self):
        """Gets the static_default_gateway of this NetworkConfig.

        静的デフォルトゲートウェイ (IPv4)  # noqa: E501

        :return: The static_default_gateway of this NetworkConfig.
        :rtype: List[int]
        """
        return self._static_default_gateway

    @static_default_gateway.setter
    def static_default_gateway(self, static_default_gateway):
        """Sets the static_default_gateway of this NetworkConfig.

        静的デフォルトゲートウェイ (IPv4)  # noqa: E501

        :param static_default_gateway: The static_default_gateway of this NetworkConfig.
        :type static_default_gateway: List[int]
        """
        if static_default_gateway is not None and len(static_default_gateway) > 4:
            raise ValueError("Invalid value for `static_default_gateway`, number of items must be less than or equal to `4`")  # noqa: E501
        if static_default_gateway is not None and len(static_default_gateway) < 4:
            raise ValueError("Invalid value for `static_default_gateway`, number of items must be greater than or equal to `4`")  # noqa: E501

        self._static_default_gateway = static_default_gateway

    @property
    def static_dns_server(self):
        """Gets the static_dns_server of this NetworkConfig.

        静的DNSサーバIP (IPv4)  # noqa: E501

        :return: The static_dns_server of this NetworkConfig.
        :rtype: List[int]
        """
        return self._static_dns_server

    @static_dns_server.setter
    def static_dns_server(self, static_dns_server):
        """Sets the static_dns_server of this NetworkConfig.

        静的DNSサーバIP (IPv4)  # noqa: E501

        :param static_dns_server: The static_dns_server of this NetworkConfig.
        :type static_dns_server: List[int]
        """
        if static_dns_server is not None and len(static_dns_server) > 4:
            raise ValueError("Invalid value for `static_dns_server`, number of items must be less than or equal to `4`")  # noqa: E501
        if static_dns_server is not None and len(static_dns_server) < 4:
            raise ValueError("Invalid value for `static_dns_server`, number of items must be greater than or equal to `4`")  # noqa: E501

        self._static_dns_server = static_dns_server

    @property
    def poe_state(self):
        """Gets the poe_state of this NetworkConfig.

        PoE電源状態   # noqa: E501

        :return: The poe_state of this NetworkConfig.
        :rtype: bool
        """
        return self._poe_state

    @poe_state.setter
    def poe_state(self, poe_state):
        """Sets the poe_state of this NetworkConfig.

        PoE電源状態   # noqa: E501

        :param poe_state: The poe_state of this NetworkConfig.
        :type poe_state: bool
        """

        self._poe_state = poe_state
