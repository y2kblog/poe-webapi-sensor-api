# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.alert_target_setting import AlertTargetSetting
from openapi_server import util

from openapi_server.models.alert_target_setting import AlertTargetSetting  # noqa: E501

class AlertTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item='temperature', setting=None):  # noqa: E501
        """AlertTarget - a model defined in OpenAPI

        :param item: The item of this AlertTarget.  # noqa: E501
        :type item: str
        :param setting: The setting of this AlertTarget.  # noqa: E501
        :type setting: AlertTargetSetting
        """
        self.openapi_types = {
            'item': str,
            'setting': AlertTargetSetting
        }

        self.attribute_map = {
            'item': 'item',
            'setting': 'setting'
        }

        self._item = item
        self._setting = setting

    @classmethod
    def from_dict(cls, dikt) -> 'AlertTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alert_target of this AlertTarget.  # noqa: E501
        :rtype: AlertTarget
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item(self):
        """Gets the item of this AlertTarget.

        測定項目を指定   # noqa: E501

        :return: The item of this AlertTarget.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this AlertTarget.

        測定項目を指定   # noqa: E501

        :param item: The item of this AlertTarget.
        :type item: str
        """
        allowed_values = ["temperature"]  # noqa: E501
        if item not in allowed_values:
            raise ValueError(
                "Invalid value for `item` ({0}), must be one of {1}"
                .format(item, allowed_values)
            )

        self._item = item

    @property
    def setting(self):
        """Gets the setting of this AlertTarget.


        :return: The setting of this AlertTarget.
        :rtype: AlertTargetSetting
        """
        return self._setting

    @setting.setter
    def setting(self, setting):
        """Sets the setting of this AlertTarget.


        :param setting: The setting of this AlertTarget.
        :type setting: AlertTargetSetting
        """

        self._setting = setting
